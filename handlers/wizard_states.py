# handlers/wizard_states.py
"""
–ú–æ–¥—É–ª—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –æ–±—â–∏—Ö —É—Ç–∏–ª–∏—Ç –¥–ª—è wizard handlers (—Å–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤) - –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
- –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—à–∞–≥–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–æ–≤.
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤.
- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏:
- ConfigWizard: –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
- safe_edit_text: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.
- safe_delete_message: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import logging

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import Router, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import get_valid_config, save_config, add_target, update_target
from services.gifts_userbot import validate_gift_id, check_gift_availability

logger = logging.getLogger(__name__)
wizard_states_router = Router()


class ConfigWizard(StatesGroup):
    """
    –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM wizard (–ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏).
    –ö–∞–∂–¥—ã–π state ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞
    target_gift_id = State()
    target_max_price = State()

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞
    edit_target_price = State()

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient_user_id = State()

    # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    userbot_api_id = State()
    userbot_api_hash = State()
    userbot_phone = State()
    userbot_code = State()
    userbot_password = State()


async def safe_delete_message(message: Message) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏.
    """
    try:
        await message.delete()
        logger.debug(f"üóëÔ∏è –°–û–û–ë–©–ï–ù–ò–Ø: –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {message.message_id}")
    except Exception as e:
        logger.debug(f"üóëÔ∏è –°–û–û–ë–©–ï–ù–ò–Ø: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.message_id}: {e}")


async def safe_edit_text(message: Message, text: str, reply_markup: InlineKeyboardMarkup = None) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ "–Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ "—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ".
    """
    try:
        await message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
        logger.debug(f"‚úÖ –°–û–û–ë–©–ï–ù–ò–Ø: –°–æ–æ–±—â–µ–Ω–∏–µ ID {message.message_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    except TelegramBadRequest as e:
        logger.debug(f"‚ö†Ô∏è –°–û–û–ë–©–ï–ù–ò–Ø: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ID {message.message_id}: {e}")
        if "message can't be edited" in str(e) or "message to edit not found" in str(e):
            return False
        else:
            raise


async def edit_bot_message(message: Message, state: FSMContext, text: str,
                           reply_markup: InlineKeyboardMarkup = None) -> bool:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É ID –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    """
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")

    if bot_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text=text,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            logger.debug(f"‚úÖ –°–û–û–ë–©–ï–ù–ò–Ø: –°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ ID {bot_message_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –°–û–û–ë–©–ï–ù–ò–Ø: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ ID {bot_message_id}: {e}")

    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_msg = await message.answer(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await state.update_data(bot_message_id=new_msg.message_id)
    logger.debug(f"üì® –°–û–û–ë–©–ï–ù–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ ID {new_msg.message_id}")
    return False


async def simple_get_chat_type(bot: Bot, username: str) -> str:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞ –ø–æ username.
    """
    if not username.startswith("@"):
        username = "@" + username

    logger.debug(f"üîç –ü–†–û–í–ï–†–ö–ê: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–∞—Ç–∞ –¥–ª—è {username}")

    try:
        chat = await bot.get_chat(username)
        if chat.type == "private":
            chat_type = "user" if not getattr(chat, "is_bot", False) else "bot"
        elif chat.type == "channel":
            chat_type = "channel"
        else:
            chat_type = "group"

        logger.debug(f"‚úÖ –ü–†–û–í–ï–†–ö–ê: –¢–∏–ø —á–∞—Ç–∞ {username}: {chat_type}")
        return chat_type
    except Exception as e:
        logger.debug(f"‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞ {username}: {e}")
        return "unknown"


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞ ===

@wizard_states_router.message(ConfigWizard.target_gift_id)
async def step_target_gift_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
    """
    if not message.text:
        logger.debug(
            f"‚ö†Ô∏è –¢–ê–†–ì–ï–¢-–ú–ê–°–¢–ï–†: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ Gift ID")
        await safe_delete_message(message)
        return

    gift_id_input = message.text.strip()
    logger.info(f"üÜî –¢–ê–†–ì–ï–¢-–ú–ê–°–¢–ï–†: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª Gift ID: {gift_id_input}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
    await safe_delete_message(message)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–¥–∞—Ä–∫–∞
    validated_gift_id = validate_gift_id(gift_id_input)
    if validated_gift_id is None:
        logger.warning(f"‚ùå –¢–ê–†–ì–ï–¢-–ú–ê–°–¢–ï–†: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Gift ID: {gift_id_input}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏</b>\n\n"
                      "ID –ø–æ–¥–∞—Ä–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º —á–∏—Å–ª–æ–º\n"
                      "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>6014591077976114307</code>\n\n"
                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.")

        await edit_bot_message(message, state, error_text, kb)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    check_text = "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∞—Ä–∫–∞...</b>\n\n–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏..."
    await edit_bot_message(message, state, check_text, kb)

    availability = await check_gift_availability(message.from_user.id, validated_gift_id)

    if not availability["available"]:
        error_msg = availability.get("error", "–ü–æ–¥–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        logger.warning(f"‚ö†Ô∏è –¢–ê–†–ì–ï–¢-–ú–ê–°–¢–ï–†: –ü–æ–¥–∞—Ä–æ–∫ ID {validated_gift_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error_msg}")

        error_text = (f"‚ö†Ô∏è <b>–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                      f"ID: <code>{validated_gift_id}</code>\n"
                      f"–û—à–∏–±–∫–∞: {error_msg}\n\n"
                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.")

        await edit_bot_message(message, state, error_text, kb)
        return

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
    gift_name_found = availability.get("gift_name", "Unknown")
    total_found = availability["total_found"]

    await state.update_data(
        gift_id=validated_gift_id,
        gift_name=gift_name_found
    )

    success_text = (f"‚úÖ <b>–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                    f"üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {gift_name_found}\n"
                    f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: {total_found:,} —à—Ç\n\n"
                    f"üí∞ –í–≤–µ–¥–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É</b> –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞:")

    await edit_bot_message(message, state, success_text, kb)
    await state.set_state(ConfigWizard.target_max_price)


@wizard_states_router.message(ConfigWizard.target_max_price)
async def step_target_max_price(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞.
    """
    if not message.text:
        logger.debug(f"‚ö†Ô∏è –¢–ê–†–ì–ï–¢-–ú–ê–°–¢–ï–†: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–µ–Ω—ã")
        await safe_delete_message(message)
        return

    price_input = message.text.strip()
    logger.info(f"üí∞ TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ü–µ–Ω—É: {price_input}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message)

    try:
        max_price = int(price_input)
        if max_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError as e:
        logger.warning(f"‚ùå –¢–ê–†–ì–ï–¢-–ú–ê–°–¢–ï–†: –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ '{price_input}': {e}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞</b>\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>15000</code>)")

        await edit_bot_message(message, state, error_text, kb)
        return

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã
    if max_price > 1000000:
        logger.warning(f"‚ö†Ô∏è –¢–ê–†–ì–ï–¢-–ú–ê–°–¢–ï–†: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–µ–Ω–∞: {max_price}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–µ–Ω–∞</b>\n\n"
                      "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1,000,000 –∑–≤–µ–∑–¥")

        await edit_bot_message(message, state, error_text, kb)
        return

    data = await state.get_data()
    gift_id = data["gift_id"]
    gift_name = data["gift_name"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤
    config = await get_valid_config()
    current_targets = config.get("TARGETS", [])
    if len(current_targets) >= 20:
        logger.warning(f"‚ö†Ô∏è –¢–ê–†–ì–ï–¢-–ú–ê–°–¢–ï–†: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤ (20/20)")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–õ–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤</b>\n\n"
                      "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤ (20 —à—Ç)\n"
                      "–£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã.")

        await edit_bot_message(message, state, error_text, kb)
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º —Ç–∞—Ä–≥–µ—Ç
    await add_target(config, str(gift_id), gift_name, max_price, save=True)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –¢–∞—Ä–≥–µ—Ç—ã", callback_data="targets_menu")],
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    success_text = (f"‚úÖ <b>–¢–∞—Ä–≥–µ—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    f"üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {gift_name}\n"
                    f"üÜî ID: <code>{gift_id}</code>\n"
                    f"üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ‚òÖ{max_price:,}\n\n"
                    f"–¢–∞—Ä–≥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")

    logger.info(f"‚úÖ TARGETS: –¢–∞—Ä–≥–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω - {gift_name}")

    await edit_bot_message(message, state, success_text, kb)
    await state.clear()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞ ===

@wizard_states_router.message(ConfigWizard.edit_target_price)
async def step_edit_target_price(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–≤–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞.
    """
    if not message.text:
        logger.debug(
            f"‚ö†Ô∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–Ω—ã")
        await safe_delete_message(message)
        return

    price_input = message.text.strip()
    logger.info(f"üí∞ TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–æ–≤—É—é —Ü–µ–Ω—É: {price_input}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message)

    data = await state.get_data()
    idx = data.get("target_index")
    if idx is None:
        logger.error("‚ùå –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å —Ç–∞—Ä–≥–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = "üö´ <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–≥–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        await edit_bot_message(message, state, error_text, kb)
        await state.clear()
        return

    try:
        new_price = int(price_input)
        if new_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError as e:
        logger.warning(f"‚ùå –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ '{price_input}': {e}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞</b>\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

        await edit_bot_message(message, state, error_text, kb)
        return

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã
    if new_price > 1000000:
        logger.warning(f"‚ö†Ô∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–µ–Ω–∞: {new_price}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–µ–Ω–∞</b>\n\n"
                      "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1,000,000 –∑–≤–µ–∑–¥")

        await edit_bot_message(message, state, error_text, kb)
        return

    config = await get_valid_config()
    targets = config.get("TARGETS", [])
    if idx >= len(targets):
        logger.error(f"‚ùå –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: –¢–∞—Ä–≥–µ—Ç #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤—Å–µ–≥–æ —Ç–∞—Ä–≥–µ—Ç–æ–≤: {len(targets)})")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = "üö´ <b>–û—à–∏–±–∫–∞</b>\n\n–¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await edit_bot_message(message, state, error_text, kb)
        await state.clear()
        return

    target = targets[idx]
    gift_name = target.get('GIFT_NAME', 'üéÅ')
    old_price = target.get('MAX_PRICE', 0)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–∞—Ä–≥–µ—Ç–∞
    await update_target(config, idx, max_price=new_price, save=True)

    logger.info(f"‚úÖ TARGETS: –¶–µ–Ω–∞ —Ç–∞—Ä–≥–µ—Ç–∞ #{idx} '{gift_name}' –∏–∑–º–µ–Ω–µ–Ω–∞: ‚òÖ{old_price:,} ‚Üí ‚òÖ{new_price:,}")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –¢–∞—Ä–≥–µ—Ç—ã", callback_data="targets_menu")],
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    success_text = (f"‚úÖ <b>–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                    f"üéÅ –¢–∞—Ä–≥–µ—Ç: {gift_name}\n"
                    f"üí∞ –ë—ã–ª–æ: ‚òÖ{old_price:,}\n"
                    f"üí∞ –°—Ç–∞–ª–æ: ‚òÖ{new_price:,}")

    await edit_bot_message(message, state, success_text, kb)
    await state.clear()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è ===

@wizard_states_router.message(ConfigWizard.recipient_user_id)
async def step_recipient_user_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ ‚Äî ID –∏–ª–∏ username.
    """
    if not message.text:
        logger.debug(
            f"‚ö†Ô∏è –ü–û–õ–£–ß–ê–¢–ï–õ–¨: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        await safe_delete_message(message)
        return

    user_input = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message)

    if user_input.startswith("@"):
        logger.debug(f"üîç –ü–û–õ–£–ß–ê–¢–ï–õ–¨: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è username: {user_input}")

        chat_type = await simple_get_chat_type(bot=message.bot, username=user_input)
        if chat_type == "channel":
            target_chat_id = user_input
            target_user_id = None
            target_type = "channel"
            logger.info(f"üì• TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–∞–Ω–∞–ª: {user_input}")
        elif chat_type == "unknown":
            target_chat_id = user_input
            target_user_id = None
            target_type = "username"
            logger.info(f"üì• TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª username: {user_input}")
        else:
            logger.warning(f"‚ùå –ü–û–õ–£–ß–ê–¢–ï–õ–¨: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞ '{chat_type}' –¥–ª—è {user_input}")

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
            ])

            error_text = ("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π username</b>\n\n"
                          "–£–∫–∞–∑–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username –∫–∞–Ω–∞–ª–∞.\n"
                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

            await edit_bot_message(message, state, error_text, kb)
            return
    elif user_input.isdigit():
        target_chat_id = None
        target_user_id = int(user_input)
        target_type = "user_id"
        logger.info(f"üì• TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª User ID: {target_user_id}")
    else:
        logger.warning(f"‚ùå –ü–û–õ–£–ß–ê–¢–ï–õ–¨: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {user_input}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞")

        await edit_bot_message(message, state, error_text, kb)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    config = await get_valid_config()
    config["TARGET_USER_ID"] = target_user_id
    config["TARGET_CHAT_ID"] = target_chat_id
    config["TARGET_TYPE"] = target_type
    await save_config(config)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    from services.config import get_target_display_local
    target_display = get_target_display_local(target_user_id, target_chat_id, message.from_user.id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    success_text = (f"‚úÖ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
                    f"üì• –ù–æ–≤—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {target_display}")

    await edit_bot_message(message, state, success_text, kb)
    await state.clear()


def register_wizard_states_handlers(dp) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    dp.include_router(wizard_states_router)
    logger.debug("üìù FSM: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")