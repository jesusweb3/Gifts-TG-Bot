# handlers/sender_management.py
"""
–ú–æ–¥—É–ª—å —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) - –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º.
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–π.
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è).
- –£–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ).
- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- sender_menu: –§–æ—Ä–º–∏—Ä—É–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º.
- on_sender_menu: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å".
- init_sender_handler: –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
- delete_sender_session: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏.
- sender_success_message: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞.
"""

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import logging

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import get_valid_config, save_config
from services.menu import safe_edit_menu
from services.userbot import (
    is_userbot_active, is_userbot_premium, delete_userbot_session,
    start_userbot, continue_userbot_signin, finish_userbot_signin
)
from services.balance import refresh_balance  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
from handlers.wizard_states import ConfigWizard, safe_delete_message
from utils.misc import now_str, PHONE_REGEX, API_HASH_REGEX

logger = logging.getLogger(__name__)
sender_router = Router()


def create_digit_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–∏—Ñ—Ä–∞–º–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞."""
    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(text='1Ô∏è‚É£', callback_data='code_1'),
        InlineKeyboardButton(text='2Ô∏è‚É£', callback_data='code_2'),
        InlineKeyboardButton(text='3Ô∏è‚É£', callback_data='code_3'),
        InlineKeyboardButton(text='4Ô∏è‚É£', callback_data='code_4'),
        InlineKeyboardButton(text='5Ô∏è‚É£', callback_data='code_5'),
        InlineKeyboardButton(text='6Ô∏è‚É£', callback_data='code_6'),
        InlineKeyboardButton(text='7Ô∏è‚É£', callback_data='code_7'),
        InlineKeyboardButton(text='8Ô∏è‚É£', callback_data='code_8'),
        InlineKeyboardButton(text='9Ô∏è‚É£', callback_data='code_9'),
        InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='code_delete'),
        InlineKeyboardButton(text='0Ô∏è‚É£', callback_data='code_0'),
        InlineKeyboardButton(text='üÜó', callback_data='code_enter')
    ]
    builder.add(*buttons)
    builder.adjust(3)
    return builder.as_markup()


async def edit_bot_message(message: Message, state: FSMContext, text: str,
                           reply_markup: InlineKeyboardMarkup = None) -> bool:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É ID –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    """
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")

    if bot_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text=text,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            logger.debug(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-UI: –°–æ–æ–±—â–µ–Ω–∏–µ ID {bot_message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-UI: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID {bot_message_id}: {e}")

    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_msg = await message.answer(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await state.update_data(bot_message_id=new_msg.message_id)
    logger.debug(f"üì® –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-UI: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {new_msg.message_id}")
    return False


@sender_router.callback_query(F.data == "sender_menu")
async def on_sender_menu(call: CallbackQuery):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–ª–±—ç–∫–∞.
    """
    logger.info(f"üì§ SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–Ω–æ–ø–∫–µ \"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å\"")
    await sender_menu(call.message, call.from_user.id)
    await call.answer()


@sender_router.callback_query(F.data == "sender_menu_edit")
async def on_sender_menu_edit(call: CallbackQuery):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–ª–±—ç–∫–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ).
    """
    logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –æ–±–Ω–æ–≤–∏–ª –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
    await sender_menu(call.message, call.from_user.id, True)
    await call.answer()


async def sender_menu(message: Message, user_id: int, edit: bool = False) -> None:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.
    """
    logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    config = await get_valid_config()
    sender = config.get("USERBOT", {})
    system_active = config.get("ACTIVE", False)

    sender_interval = sender.get("UPDATE_INTERVAL")
    sender_username = sender.get("USERNAME")
    sender_user_id = sender.get("USER_ID")
    sender_first_name = sender.get("FIRST_NAME", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    phone = sender.get("PHONE")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
    sender_balance = sender.get("BALANCE", 0)

    if is_userbot_active(user_id):
        logger.debug(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        is_premium = await is_userbot_premium(user_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_display = sender_first_name
        if sender_username:
            sender_display += f" (@{sender_username})"

        text = (
            "üì§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º</b>\n\n"
            "‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω.</b>\n\n"
            f"‚îå <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {sender_display}\n"
            f"‚îú <b>ID:</b> <code>{sender_user_id}</code>\n"
            f"‚îú <b>–ù–æ–º–µ—Ä:</b> <code>{phone or '‚Äî'}</code>\n"
            f"‚îú <b>–ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç:</b> {'–î–∞' if is_premium else '‚ö†Ô∏è –ù–µ—Ç'}\n"
            f"‚îú <b>–ë–∞–ª–∞–Ω—Å:</b> {sender_balance:,} ‚òÖ\n"
            f"‚îî <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {sender_interval} —Å–µ–∫—É–Ω–¥"
        )

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        if system_active:
            # –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –±–ª–æ–∫–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            keyboard = [
                [
                    InlineKeyboardButton(text="‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="sender_interval"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="sender_refresh_balance"),
                ],
                [
                    InlineKeyboardButton(text="üö´ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ", callback_data="sender_delete_blocked")
                ],
                [
                    InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            text += "\n\n‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</b> - —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞."
        else:
            # –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            keyboard = [
                [
                    InlineKeyboardButton(text="‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="sender_interval"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="sender_refresh_balance"),
                ],
                [
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="sender_confirm_delete")
                ],
                [
                    InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")
                ]
            ]

        logger.info(
            f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ú–µ–Ω—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ - {sender_display}, –±–∞–ª–∞–Ω—Å: {sender_balance:,} ‚òÖ, —Å–∏—Å—Ç–µ–º–∞: {'–∞–∫—Ç–∏–≤–Ω–∞' if system_active else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
    else:
        logger.debug(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        text = (
            "üì§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º</b>\n\n"
            "üö´ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.</b>\n\n"
            "üìã <b>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            "üî∏ <code>api_id</code>\n"
            "üî∏ <code>api_hash</code>\n"
            "üî∏ <code>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</code>\n\n"
            "üìé –ü–æ–ª—É—á–∏—Ç—å <b><a href=\"https://my.telegram.org\">API –¥–∞–Ω–Ω—ã–µ</a></b>\n"
            "üìú –ü—Ä–æ—á–∏—Ç–∞—Ç—å <b><a href=\"https://core.telegram.org/api/terms\">—É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a></b>"
        )
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", callback_data="init_sender")],
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ]

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await safe_edit_menu(message, text, markup)


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
@sender_router.callback_query(F.data == "sender_refresh_balance")
async def on_sender_refresh_balance(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
    """
    logger.info(f"üîÑ SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")

    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
    if not is_userbot_active(user_id):
        logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ")
        await call.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await call.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
        new_balance = await refresh_balance(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        await sender_menu(call.message, user_id, edit=True)

        logger.info(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {new_balance:,} ‚òÖ")

    except Exception as e:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", show_alert=True)


@sender_router.callback_query(F.data == "sender_delete_blocked")
async def on_sender_delete_blocked(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è.
    """
    logger.info(f"üö´ SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
    await call.answer("üö´ –û—Ç–∫–ª—é—á–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!", show_alert=True)


@sender_router.callback_query(F.data == "sender_interval")
async def on_sender_interval(call: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
    """
    logger.info(f"‚è≥ SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–Ω–æ–ø–∫–µ \"–ò–Ω—Ç–µ—Ä–≤–∞–ª\"")

    config = await get_valid_config()
    current_interval = config.get("USERBOT", {}).get("UPDATE_INTERVAL", 45)

    logger.debug(f"‚è≥ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫—É–Ω–¥")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="30 —Å–µ–∫—É–Ω–¥", callback_data="edit_sender_interval_30"),
            InlineKeyboardButton(text="45 —Å–µ–∫—É–Ω–¥", callback_data="edit_sender_interval_45")
        ],
        [
            InlineKeyboardButton(text="60 —Å–µ–∫—É–Ω–¥", callback_data="edit_sender_interval_60"),
            InlineKeyboardButton(text="90 —Å–µ–∫—É–Ω–¥", callback_data="edit_sender_interval_90")
        ],
        [
            InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", callback_data="sender_menu_edit"),
            InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")
        ]
    ])

    text = ("‚è≥ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:\n\n"
            "‚ùóÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>45 —Å–µ–∫—É–Ω–¥</b>.\n"
            "‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ <b>–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã Telegram</b>.")

    await safe_edit_menu(call.message, text, kb)
    await call.answer()


@sender_router.callback_query(lambda c: c.data.startswith("edit_sender_interval_"))
async def edit_sender_interval(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
    """
    interval_mapping = {
        "edit_sender_interval_30": 30,
        "edit_sender_interval_45": 45,
        "edit_sender_interval_60": 60,
        "edit_sender_interval_90": 90
    }

    interval = interval_mapping.get(call.data)
    if interval is None:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ–≤–µ—Ä–Ω—ã–π callback –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {call.data}")
        await call.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.", show_alert=True)
        return

    logger.info(f"‚è≥ SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval} —Å–µ–∫—É–Ω–¥")

    user_id = call.from_user.id
    config = await get_valid_config()
    config["USERBOT"]["UPDATE_INTERVAL"] = interval
    await save_config(config)

    await call.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫")
    await sender_menu(call.message, user_id, edit=True)


@sender_router.callback_query(F.data == "sender_confirm_delete")
async def confirm_sender_delete(call: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.
    """
    logger.info(f"üóëÔ∏è SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–Ω–æ–ø–∫–µ \"–£–¥–∞–ª–∏—Ç—å\"")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    config = await get_valid_config()
    if config.get("ACTIVE", False):
        logger.warning(f"üö´ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
        await call.answer("üö´ –û—Ç–∫–ª—é—á–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!", show_alert=True)
        return

    sender = config.get("USERBOT", {})
    sender_name = sender.get("FIRST_NAME", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    sender_phone = sender.get("PHONE", "–ù–µ —É–∫–∞–∑–∞–Ω")

    logger.debug(f"üóëÔ∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è - {sender_name} ({sender_phone})")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="sender_delete_yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="sender_delete_no")
        ]
    ])

    text = ("‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å</b>?\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")

    await safe_edit_menu(call.message, text, kb)
    await call.answer()


@sender_router.callback_query(F.data == "sender_delete_no")
async def cancel_sender_delete(call: CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é.
    """
    logger.info(f"‚Ü©Ô∏è SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–Ω–æ–ø–∫–µ \"–ù–µ—Ç\"")

    user_id = call.from_user.id
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await sender_menu(call.message, user_id, edit=True)


@sender_router.callback_query(F.data == "sender_delete_yes")
async def sender_delete_handler(call: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.
    """
    user_id = call.from_user.id

    logger.info(f"üóëÔ∏è SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–Ω–æ–ø–∫–µ \"–î–∞\"")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    config = await get_valid_config()
    if config.get("ACTIVE", False):
        logger.warning(f"üö´ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –§–∏–Ω–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await call.answer("üö´ –û—Ç–∫–ª—é—á–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await sender_menu(call.message, user_id, edit=True)
        return

    sender = config.get("USERBOT", {})
    sender_name = sender.get("FIRST_NAME", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    success = await delete_userbot_session(call, user_id)

    if success:
        logger.info(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å '{sender_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        text = ("‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n"
                "–ú–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.")

        await safe_edit_menu(call.message, text, kb)
    else:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å '{sender_name}'")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        text = ("üö´ <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.")

        await safe_edit_menu(call.message, text, kb)

    await call.answer()


# === –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ===

@sender_router.callback_query(F.data == "init_sender")
async def init_sender_handler(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏ (—à–∞–≥ –≤–≤–æ–¥–∞ api_id).
    """
    logger.info(f"üîê SENDER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–Ω–æ–ø–∫–µ \"–ü–æ–¥–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å\"")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    text = ("üîë <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>api_id</b>:\n\n"
            "–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ <a href=\"https://my.telegram.org\">my.telegram.org</a>")

    await safe_edit_menu(call.message, text, kb)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(bot_message_id=call.message.message_id)
    await state.set_state(ConfigWizard.userbot_api_id)
    await call.answer()


@sender_router.message(ConfigWizard.userbot_api_id)
async def get_api_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ api_id –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    if not message.text:
        await safe_delete_message(message)
        return

    api_id_input = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message)

    if not api_id_input.isdigit() or not (10000 <= int(api_id_input) <= 9999999999):
        logger.warning(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π API_ID: {api_id_input}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π api_id</b>\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 10000 –¥–æ 9999999999")

        await edit_bot_message(message, state, error_text, kb)
        return

    value = int(api_id_input)
    await state.update_data(api_id=value)

    logger.info(f"üîë –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤–∞–ª–∏–¥–Ω—ã–π API_ID: {value}")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    next_text = ("üîë <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ <b>api_hash</b>:\n\n"
                 "32-—Å–∏–º–≤–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å my.telegram.org")

    await edit_bot_message(message, state, next_text, kb)
    await state.set_state(ConfigWizard.userbot_api_hash)


@sender_router.message(ConfigWizard.userbot_api_hash)
async def get_api_hash(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ api_hash –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    if not message.text:
        await safe_delete_message(message)
        return

    api_hash = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message)

    if not API_HASH_REGEX.fullmatch(api_hash):
        logger.warning(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π API_HASH: {api_hash[:8]}...")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π api_hash</b>\n\n"
                      "api_hash –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞ (0-9, a-f)")

        await edit_bot_message(message, state, error_text, kb)
        return

    await state.update_data(api_hash=api_hash)

    logger.info(f"üîë –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤–∞–ª–∏–¥–Ω—ã–π API_HASH: {api_hash[:8]}...")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    next_text = ("üì± <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
                 "–í —Ñ–æ—Ä–º–∞—Ç–µ <code>+490123456789</code>")

    await edit_bot_message(message, state, next_text, kb)
    await state.set_state(ConfigWizard.userbot_phone)


@sender_router.message(ConfigWizard.userbot_phone)
async def get_phone(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    if not message.text:
        await safe_delete_message(message)
        return

    raw_phone = message.text.strip()
    phone = raw_phone.replace(" ", "")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message)

    if not PHONE_REGEX.match(phone):
        logger.warning(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä</b>\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>+490123456789</code>")

        await edit_bot_message(message, state, error_text, kb)
        return

    await state.update_data(phone=phone)

    logger.info(f"üì± –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")

    success = await start_userbot(message, state)
    if not success:
        logger.error("‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        await sender_menu(message, message.from_user.id, edit=False)
        await state.clear()
        return

    await state.set_state(ConfigWizard.userbot_code)
    await state.update_data(current_code="")

    text = ("üì± <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:\n\n"
            "üî¢ –ö–æ–¥:\n\n"
            "‚¨ÖÔ∏è ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—É\nüÜó ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥")

    await edit_bot_message(message, state, text, create_digit_keyboard())


@sender_router.callback_query(F.data.regexp(r"^code_\d$"), ConfigWizard.userbot_code)
async def on_code_digit(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    digit = call.data.split('_')[1]
    data = await state.get_data()
    current_code = data.get("current_code", "") + digit
    await state.update_data(current_code=current_code)

    await call.answer()

    text = (f"üì± <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:\n\n"
            f"üî¢ –ö–æ–¥: <b>{current_code}</b>\n\n"
            f"‚¨ÖÔ∏è ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—É\nüÜó ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥")

    await safe_edit_menu(call.message, text, create_digit_keyboard())


@sender_router.callback_query(F.data == "code_delete", ConfigWizard.userbot_code)
async def on_code_delete(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã –∏–∑ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    data = await state.get_data()
    old_code = data.get("current_code", "")
    current_code = old_code[:-1]
    await state.update_data(current_code=current_code)

    await call.answer()

    text = (f"üì± <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:\n\n"
            f"üî¢ –ö–æ–¥: <b>{current_code}</b>\n\n"
            f"‚¨ÖÔ∏è ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—É\nüÜó ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥")

    await safe_edit_menu(call.message, text, create_digit_keyboard())


@sender_router.callback_query(F.data == "code_enter", ConfigWizard.userbot_code)
async def on_code_enter(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    data = await state.get_data()
    current_code = data.get("current_code", "")

    logger.info(f"üîê –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥: {current_code}")

    if not (4 <= len(current_code) <= 6):
        await call.answer("üö´ –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 4 –¥–æ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        return

    processing_text = (f"üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...</b>\n\n"
                       f"–ö–æ–¥: <b>{current_code}</b>\n\n"
                       f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")

    await safe_edit_menu(call.message, processing_text, None)

    await state.update_data(code=current_code)

    success, need_password, retry = await continue_userbot_signin(call, state)

    if retry:
        await state.set_state(ConfigWizard.userbot_code)
        await state.update_data(current_code="")

        retry_text = ("üì± <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
                      "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:\n\n"
                      "üî¢ –ö–æ–¥:\n\n"
                      "‚¨ÖÔ∏è ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—É\nüÜó ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥")

        await safe_edit_menu(call.message, retry_text, create_digit_keyboard())
        return

    if not success:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                      "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∫–æ–¥–æ–º.")

        await safe_edit_menu(call.message, error_text, kb)
        await state.clear()
        await call.answer()
        return

    if need_password:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        password_text = ("üîê <b>–û–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:")

        await safe_edit_menu(call.message, password_text, kb)
        await state.set_state(ConfigWizard.userbot_password)
    else:
        await sender_success_message(call, state)

    await call.answer()


@sender_router.message(ConfigWizard.userbot_password)
async def get_password(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
    """
    if not message.text:
        await safe_delete_message(message)
        return

    logger.info(f"üîê –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨-–ú–ê–°–¢–ï–†: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º
    await safe_delete_message(message)

    await state.update_data(password=message.text.strip())

    success, retry = await finish_userbot_signin(message, state)

    if retry:
        return

    if success:
        await sender_success_message_text(message, state)
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
        ])

        error_text = ("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>\n\n"
                      "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø—Ä–µ—Ä–≤–∞–Ω–æ.")

        await edit_bot_message(message, state, error_text, kb)

    await state.clear()


async def sender_success_message(call: CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ CallbackQuery.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    user_id = call.from_user.id

    # –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    logger.info(f"üîÑ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        new_balance = await refresh_balance(user_id)
        logger.info(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {new_balance:,} ‚òÖ")
    except Exception as balance_error:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {balance_error}")
        new_balance = 0

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", callback_data="sender_menu")],
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    success_text = (f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω!</b>\n\n"
                    f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance:,} ‚òÖ")

    await safe_edit_menu(call.message, success_text, kb)
    await state.clear()


async def sender_success_message_text(message: Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ Message.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    user_id = message.from_user.id

    # –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    logger.info(f"üîÑ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        new_balance = await refresh_balance(user_id)
        logger.info(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {new_balance:,} ‚òÖ")
    except Exception as balance_error:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {balance_error}")
        new_balance = 0

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", callback_data="sender_menu")],
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    success_text = (f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω!</b>\n\n"
                    f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance:,} ‚òÖ")

    await edit_bot_message(message, state, success_text, kb)
    await state.clear()


def register_sender_handlers(dp) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
    """
    dp.include_router(sender_router)
    logger.debug("üìù –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")