# handlers/targets.py
"""
–ú–æ–¥—É–ª—å —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞–º–∏ - –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞–º–∏.
- –°–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–æ–≤.
- –í–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∞—Ä–≥–µ—Ç–æ–≤.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- targets_menu: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞–º–∏.
- on_targets_menu: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–∞—Ä–≥–µ—Ç—ã".
- target_add_handlers: –ì—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–æ–≤.
- target_edit_handlers: –ì—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–æ–≤.
"""

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import logging

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import get_valid_config, remove_target, update_target
from services.menu import safe_edit_menu
from handlers.wizard_states import ConfigWizard

logger = logging.getLogger(__name__)
targets_router = Router()


async def targets_menu(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞–º–∏ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞—Ä–≥–µ—Ç–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞.
    """
    logger.debug("üéØ –¢–ê–†–ì–ï–¢–´: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞–º–∏")

    config = await get_valid_config()
    targets = config.get("TARGETS", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞—Ä–≥–µ—Ç–æ–≤
    keyboard = []
    for idx, target in enumerate(targets):
        gift_name = target.get('GIFT_NAME', 'üéÅ')
        max_price = target.get('MAX_PRICE', 0)
        enabled = target.get('ENABLED', True)
        status_icon = "‚úÖ" if enabled else "üîï"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞
        btn = InlineKeyboardButton(
            text=f"{status_icon} {gift_name} ‚òÖ{max_price:,}",
            callback_data=f"target_edit_{idx}"
        )
        keyboard.append([btn])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20)
    max_targets = 20
    if len(targets) < max_targets:
        keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç", callback_data="target_add")])
    else:
        keyboard.append([InlineKeyboardButton(text="üö´ –õ–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤ (20/20)", callback_data="target_limit_reached")])

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
    lines = []
    enabled_count = len([t for t in targets if t.get('ENABLED', True)])

    if targets:
        lines.append(f"üéØ <b>–í—Å–µ–≥–æ —Ç–∞—Ä–≥–µ—Ç–æ–≤:</b> {len(targets)}/{max_targets}")
        lines.append(f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {enabled_count}")
        lines.append("")

        for idx, target in enumerate(targets, 1):
            gift_name = target.get('GIFT_NAME', 'üéÅ')
            gift_id = target.get('GIFT_ID', 'N/A')
            max_price = target.get('MAX_PRICE', 0)
            enabled = target.get('ENABLED', True)
            status_icon = "‚úÖ" if enabled else "üîï"

            if len(targets) == 1:
                line = f"{status_icon} <b>{gift_name}</b> (ID: {gift_id}) –¥–æ ‚òÖ{max_price:,}"
            elif idx == 1:
                line = f"‚îå{status_icon} <b>{gift_name}</b> (ID: {gift_id}) –¥–æ ‚òÖ{max_price:,}"
            elif idx == len(targets):
                line = f"‚îî{status_icon} <b>{gift_name}</b> (ID: {gift_id}) –¥–æ ‚òÖ{max_price:,}"
            else:
                line = f"‚îú{status_icon} <b>{gift_name}</b> (ID: {gift_id}) –¥–æ ‚òÖ{max_price:,}"

            lines.append(line)
        text_targets = "\n".join(lines)
    else:
        text_targets = f"üéØ <b>–¢–∞—Ä–≥–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç (0/{max_targets})</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–∞—Ä–≥–µ—Ç, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ –≤–∞—à–∏–º —Ü–µ–Ω–æ–≤—ã–º –ª–∏–º–∏—Ç–∞–º."

    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    logger.debug(f"üéØ –¢–ê–†–ì–ï–¢–´: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é - –≤—Å–µ–≥–æ: {len(targets)}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {enabled_count}")

    await safe_edit_menu(
        message,
        f"{text_targets}\n\n"
        "üëâ <b>–ù–∞–∂–º–∏—Ç–µ</b> –Ω–∞ —Ç–∞—Ä–≥–µ—Ç —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.\n"
        "üéØ <b>–¢–∞—Ä–≥–µ—Ç</b> ‚Äî —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
        kb
    )


@targets_router.callback_query(F.data == "targets_menu")
async def on_targets_menu(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–∞—Ä–≥–µ—Ç—ã" –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–∞—Ä–≥–µ—Ç–æ–≤.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–∞—Ä–≥–µ—Ç–∞–º.
    """
    logger.info(f"üéØ TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–Ω–æ–ø–∫–µ \"–¢–∞—Ä–≥–µ—Ç—ã\"")

    config = await get_valid_config()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    userbot = config.get("USERBOT", {})
    sender_configured = bool(
        userbot.get("API_ID") and
        userbot.get("API_HASH") and
        userbot.get("PHONE")
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient_configured = bool(
        config.get("TARGET_USER_ID") or
        config.get("TARGET_CHAT_ID")
    )

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    if not sender_configured or not recipient_configured:
        missing_items = []
        if not sender_configured:
            missing_items.append("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å")
        if not recipient_configured:
            missing_items.append("–ü–æ–ª—É—á–∞—Ç–µ–ª—å")

        missing_text = " –∏ ".join(missing_items)
        alert_text = f"‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ: {missing_text}"

        logger.warning(f"‚ö†Ô∏è –¢–ê–†–ì–ï–¢–´: –î–æ—Å—Ç—É–ø –∫ —Ç–∞—Ä–≥–µ—Ç–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {missing_text}")
        await call.answer(alert_text, show_alert=True)
        return

    # –ï—Å–ª–∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–∞—Ä–≥–µ—Ç–æ–≤
    await targets_menu(call.message)
    await call.answer()


@targets_router.callback_query(F.data == "target_limit_reached")
async def on_target_limit_reached(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–∏–º–∏—Ç–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤.
    """
    logger.warning(f"‚ö†Ô∏è –¢–ê–†–ì–ï–¢–´: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤ (20)")
    await call.answer("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤ (20 —à—Ç). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã.", show_alert=True)


def target_text(target: dict, idx: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∞—Ä–≥–µ—Ç–∞ –ø–æ –µ–≥–æ –¥–∞–Ω–Ω—ã–º.
    """
    gift_name = target.get('GIFT_NAME', 'üéÅ')
    gift_id = target.get('GIFT_ID', 'N/A')
    max_price = target.get('MAX_PRICE', 0)
    enabled = target.get('ENABLED', True)
    status_text = "‚úÖ –í–∫–ª—é—á—ë–Ω" if enabled else "üîï –í—ã–∫–ª—é—á–µ–Ω"

    return (f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ {idx + 1}</b>:\n\n"
            f"‚îåüéÅ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {gift_name}\n"
            f"‚îúüÜî <b>ID –ø–æ–¥–∞—Ä–∫–∞:</b> <code>{gift_id}</code>\n"
            f"‚îúüí∞ <b>–ú–∞–∫—Å. —Ü–µ–Ω–∞:</b> ‚òÖ{max_price:,}\n"
            f"‚îîüîò <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}")


def target_edit_keyboard(idx: int, enabled: bool) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞.
    """
    toggle_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å" if enabled else "‚úÖ –í–∫–ª—é—á–∏—Ç—å"
    toggle_callback = f"target_toggle_{idx}"

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"edit_target_price_{idx}"),
                InlineKeyboardButton(text=toggle_text, callback_data=toggle_callback)
            ],
            [
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"target_delete_{idx}")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="targets_menu"),
                InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")
            ]
        ]
    )


@targets_router.callback_query(lambda c: c.data.startswith("target_edit_"))
async def on_target_edit(call: CallbackQuery, state: FSMContext):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞.
    """
    idx = int(call.data.split("_")[-1])

    logger.info(f"‚úèÔ∏è TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–∞—Ä–≥–µ—Ç #{idx}")

    config = await get_valid_config()
    targets = config.get("TARGETS", [])

    if idx >= len(targets):
        logger.error(f"‚ùå –¢–ê–†–ì–ï–¢–´: –¢–∞—Ä–≥–µ—Ç #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤—Å–µ–≥–æ —Ç–∞—Ä–≥–µ—Ç–æ–≤: {len(targets)})")
        await call.answer("üö´ –¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    target = targets[idx]
    enabled = target.get('ENABLED', True)
    gift_name = target.get('GIFT_NAME', 'üéÅ')

    logger.debug(f"‚úèÔ∏è –¢–ê–†–ì–ï–¢–´: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞ #{idx}: {gift_name}")

    await state.update_data(target_index=idx)

    await safe_edit_menu(
        call.message,
        target_text(target, idx),
        target_edit_keyboard(idx, enabled)
    )
    await call.answer()


@targets_router.callback_query(lambda c: c.data.startswith("target_toggle_"))
async def on_target_toggle(call: CallbackQuery):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–≥–µ—Ç–∞ (–≤–∫–ª—é—á—ë–Ω/–≤—ã–∫–ª—é—á–µ–Ω).
    """
    idx = int(call.data.split("_")[-1])

    logger.info(f"üîÑ TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–≥–µ—Ç–∞ #{idx}")

    config = await get_valid_config()
    targets = config.get("TARGETS", [])

    if idx >= len(targets):
        logger.error(f"‚ùå –¢–ê–†–ì–ï–¢–´: –¢–∞—Ä–≥–µ—Ç #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
        await call.answer("üö´ –¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    target = targets[idx]
    old_enabled = target.get('ENABLED', True)
    new_enabled = not old_enabled
    gift_name = target.get('GIFT_NAME', 'üéÅ')

    await update_target(config, idx, enabled=new_enabled, save=True)

    logger.info(f"‚úÖ –¢–ê–†–ì–ï–¢–´: –°—Ç–∞—Ç—É—Å —Ç–∞—Ä–≥–µ—Ç–∞ #{idx} '{gift_name}' –∏–∑–º–µ–Ω–µ–Ω: {old_enabled} ‚Üí {new_enabled}")

    await safe_edit_menu(
        call.message,
        target_text(target, idx),
        target_edit_keyboard(idx, new_enabled)
    )

    status_text = "–≤–∫–ª—é—á—ë–Ω" if new_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
    await call.answer(f"–¢–∞—Ä–≥–µ—Ç {status_text}")


@targets_router.callback_query(F.data == "target_add")
async def on_target_add(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
    """
    logger.info(f"‚ûï TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –ø–æ –∫–Ω–æ–ø–∫–µ \"–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç\"")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤
    config = await get_valid_config()
    current_targets = config.get("TARGETS", [])

    if len(current_targets) >= 20:
        logger.warning(f"‚ö†Ô∏è –¢–ê–†–ì–ï–¢–´: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ (20/20)")
        await call.answer("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤ (20 —à—Ç)", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    text = ("üÜî <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>ID –ø–æ–¥–∞—Ä–∫–∞</b>:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>6014591077976114307</code>")

    await safe_edit_menu(call.message, text, kb)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(bot_message_id=call.message.message_id)
    await state.set_state(ConfigWizard.target_gift_id)
    await call.answer()


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —Ç–∞—Ä–≥–µ—Ç–∞ ===

@targets_router.callback_query(lambda c: c.data.startswith("edit_target_price_"))
async def edit_target_price(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Ç–∞—Ä–≥–µ—Ç–∞.
    """
    idx = int(call.data.split("_")[-1])

    logger.info(f"üí∞ TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Ç–∞—Ä–≥–µ—Ç–∞ #{idx}")

    config = await get_valid_config()
    targets = config.get("TARGETS", [])

    if idx >= len(targets):
        logger.error(f"‚ùå –¢–ê–†–ì–ï–¢–´: –¢–∞—Ä–≥–µ—Ç #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã")
        await call.answer("üö´ –¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    target = targets[idx]
    gift_name = target.get('GIFT_NAME', 'üéÅ')
    current_price = target.get('MAX_PRICE', 0)

    logger.debug(f"üí∞ –¢–ê–†–ì–ï–¢–´: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–≥–µ—Ç–∞ #{idx} '{gift_name}': ‚òÖ{current_price:,}")

    await state.update_data(target_index=idx)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    text = (f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–∞—Ä–≥–µ—Ç–∞</b>\n\n"
            f"üéÅ –¢–∞—Ä–≥–µ—Ç: {gift_name}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ‚òÖ{current_price:,}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É</b>:\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15000</code>")

    await safe_edit_menu(call.message, text, kb)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(bot_message_id=call.message.message_id)
    await state.set_state(ConfigWizard.edit_target_price)
    await call.answer()


# === –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–æ–≤ ===

@targets_router.callback_query(lambda c: c.data.startswith("target_delete_"))
async def on_target_delete_confirm(call: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞.
    """
    idx = int(call.data.split("_")[-1])

    logger.info(f"üóëÔ∏è TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ #{idx}")

    config = await get_valid_config()
    targets = config.get("TARGETS", [])

    if idx >= len(targets):
        logger.error(f"‚ùå –¢–ê–†–ì–ï–¢–´: –¢–∞—Ä–≥–µ—Ç #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        await call.answer("üö´ –¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    target = targets[idx]
    gift_name = target.get('GIFT_NAME', 'üéÅ')
    max_price = target.get('MAX_PRICE', 0)
    gift_id = target.get('GIFT_ID', 'N/A')

    logger.debug(f"üóëÔ∏è –¢–ê–†–ì–ï–¢–´: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞ #{idx}: {gift_name} (‚òÖ{max_price:,})")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_target_delete_{idx}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_target_delete_{idx}"),
            ]
        ]
    )

    message = (f"‚îåüéÅ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {gift_name}\n"
               f"‚îúüí∞ <b>–ú–∞–∫—Å. —Ü–µ–Ω–∞:</b> ‚òÖ{max_price:,}\n"
               f"‚îîüÜî <b>ID:</b> <code>{gift_id}</code>")

    text = f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç?\n\n{message}"

    await safe_edit_menu(call.message, text, kb)
    await call.answer()


@targets_router.callback_query(lambda c: c.data.startswith("confirm_target_delete_"))
async def on_target_delete_final(call: CallbackQuery):
    """
    –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ç–∞—Ä–≥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    idx = int(call.data.split("_")[-1])

    logger.info(f"üóëÔ∏è TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ #{idx}")

    config = await get_valid_config()
    targets = config.get("TARGETS", [])

    if idx >= len(targets):
        logger.error(f"‚ùå –¢–ê–†–ì–ï–¢–´: –¢–∞—Ä–≥–µ—Ç #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
        await call.answer("üö´ –¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    target = targets[idx]
    gift_name = target.get('GIFT_NAME', 'üéÅ')
    gift_id = target.get('GIFT_ID', 'N/A')
    max_price = target.get('MAX_PRICE', 0)

    await remove_target(config, idx, save=True)

    logger.info(f"‚úÖ –¢–ê–†–ì–ï–¢–´: –¢–∞—Ä–≥–µ—Ç #{idx} '{gift_name}' (ID: {gift_id}, ‚òÖ{max_price:,}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –¢–∞—Ä–≥–µ—Ç—ã", callback_data="targets_menu")],
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="main_menu")]
    ])

    text = f"‚úÖ <b>–¢–∞—Ä–≥–µ—Ç —É–¥–∞–ª—ë–Ω!</b>\n\n–¢–∞—Ä–≥–µ—Ç <b>{gift_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã."

    await safe_edit_menu(call.message, text, kb)
    await call.answer()


@targets_router.callback_query(lambda c: c.data.startswith("cancel_target_delete_"))
async def on_target_delete_cancel(call: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞.
    """
    idx = int(call.data.split("_")[-1])

    logger.info(f"‚Ü©Ô∏è TARGETS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ #{idx}")

    config = await get_valid_config()
    targets = config.get("TARGETS", [])

    if idx >= len(targets):
        logger.error(f"‚ùå –¢–ê–†–ì–ï–¢–´: –¢–∞—Ä–≥–µ—Ç #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è")
        await call.answer("üö´ –¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    target = targets[idx]
    enabled = target.get('ENABLED', True)

    await safe_edit_menu(
        call.message,
        target_text(target, idx),
        target_edit_keyboard(idx, enabled)
    )
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")


def register_targets_handlers(dp) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∞—Ä–≥–µ—Ç–∞–º–∏.
    """
    dp.include_router(targets_router)
    logger.debug("üìù –¢–ê–†–ì–ï–¢–´: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞—Ä–≥–µ—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")