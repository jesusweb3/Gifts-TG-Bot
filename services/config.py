# services/config.py
"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–∞—Ä–≥–µ—Ç–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–∞—Ä–≥–µ—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤.
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å) –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ).
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- ensure_config: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ config.json.
- load_config: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —Ñ–∞–π–ª–∞.
- save_config: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –≤ —Ñ–∞–π–ª.
- get_valid_config: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥.
- add_target/remove_target/update_target: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞–º–∏.
- format_config_summary: –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
"""

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import json
import os
import logging

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import aiofiles

logger = logging.getLogger(__name__)

VERSION = '1.0.0'  # –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤)
CONFIG_PATH = "config.json"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
MORE_LOGS = False  # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
DEFAULT_BOT_DELAY = 1.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–µ—Å—Å–∏–∏
DEVICE_MODEL = "Desktop"
SYSTEM_VERSION = "Windows 10"
APP_VERSION = "1.0.0"
LANG_CODE = "en"
SYSTEM_LANG_CODE = "en"


def default_config() -> dict:
    """
    –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–∞—Ä–≥–µ—Ç–æ–≤.
    :return: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    return {
        "ACTIVE": False,
        "LAST_MENU_MESSAGE_ID": None,
        "TARGET_USER_ID": None,
        "TARGET_CHAT_ID": None,
        "TARGET_TYPE": None,
        "TARGETS": [],
        "USERBOT": {
            "API_ID": None,
            "API_HASH": None,
            "PHONE": None,
            "USER_ID": None,
            "USERNAME": None,
            "FIRST_NAME": None,
            "BALANCE": 0,
            "ENABLED": True,
            "UPDATE_INTERVAL": 45
        }
    }


async def ensure_config(path: str = CONFIG_PATH):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ config.json.
    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    if not os.path.exists(path):
        async with aiofiles.open(path, mode="w", encoding="utf-8") as f:
            await f.write(json.dumps(default_config(), indent=2))


async def load_config(path: str = CONFIG_PATH) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —Ñ–∞–π–ª–∞. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :return: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    if not os.path.exists(path):
        raise FileNotFoundError(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ensure_config.")
    async with aiofiles.open(path, mode="r", encoding="utf-8") as f:
        data = await f.read()
        return json.loads(data)


async def save_config(config: dict, path: str = CONFIG_PATH):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –≤ —Ñ–∞–π–ª.
    :param config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    async with aiofiles.open(path, mode="w", encoding="utf-8") as f:
        await f.write(json.dumps(config, indent=2))


def simple_validate_config(config: dict) -> dict:
    """
    –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    :param config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :return: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    """
    default = default_config()

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø–æ–ª—è
    for key, default_value in default.items():
        if key not in config:
            config[key] = default_value

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ USERBOT
    if "USERBOT" not in config or not isinstance(config["USERBOT"], dict):
        config["USERBOT"] = default["USERBOT"]
    else:
        for key, default_value in default["USERBOT"].items():
            if key not in config["USERBOT"]:
                config["USERBOT"][key] = default_value

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º TARGETS
    if "TARGETS" not in config or not isinstance(config["TARGETS"], list):
        config["TARGETS"] = []
    else:
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞
        valid_targets = []
        for target in config["TARGETS"]:
            if isinstance(target, dict) and target.get("GIFT_ID") and target.get("GIFT_NAME"):
                valid_target = {
                    "GIFT_ID": str(target.get("GIFT_ID", "")),
                    "GIFT_NAME": str(target.get("GIFT_NAME", "üéÅ")),
                    "MAX_PRICE": int(target.get("MAX_PRICE", 10000)),
                    "ENABLED": bool(target.get("ENABLED", True))
                }
                valid_targets.append(valid_target)
        config["TARGETS"] = valid_targets

    return config


async def get_valid_config(path: str = CONFIG_PATH) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç config.json.
    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :return: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    """
    await ensure_config(path)
    config = await load_config(path)
    validated = simple_validate_config(config)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    if validated != config:
        await save_config(validated, path)

    return validated


async def update_config_from_env(path: str = CONFIG_PATH, config_data: str = None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã CONFIG_DATA.
    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :param config_data: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    """
    try:
        config_dict = json.loads(config_data)
    except json.JSONDecodeError as e:
        logger.error(f"CONFIG_DATA –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON: {e}")
        return

    try:
        async with aiofiles.open(path, mode="w", encoding="utf-8") as f:
            await f.write(json.dumps(config_dict, indent=2, ensure_ascii=False))
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã CONFIG_DATA.")
    except OSError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ CONFIG_DATA: {e}")


async def add_target(config: dict, gift_id: str, gift_name: str, max_price: int, save: bool = True) -> dict:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–∞—Ä–≥–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥.
    :param config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :param gift_id: ID –ø–æ–¥–∞—Ä–∫–∞
    :param gift_name: –ù–∞–∑–≤–∞–Ω–∏–µ/—ç–º–æ–¥–∑–∏ –ø–æ–¥–∞—Ä–∫–∞
    :param max_price: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    :param save: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∫–æ–Ω—Ñ–∏–≥
    :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    """
    new_target = {
        "GIFT_ID": str(gift_id),
        "GIFT_NAME": str(gift_name),
        "MAX_PRICE": int(max_price),
        "ENABLED": True
    }
    config.setdefault("TARGETS", []).append(new_target)
    if save:
        await save_config(config)
    return config


async def remove_target(config: dict, index: int, save: bool = True) -> dict:
    """
    –£–¥–∞–ª—è–µ—Ç —Ç–∞—Ä–≥–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É.
    :param config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :param index: –ò–Ω–¥–µ–∫—Å —Ç–∞—Ä–≥–µ—Ç–∞
    :param save: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∫–æ–Ω—Ñ–∏–≥
    :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    """
    if "TARGETS" not in config or index >= len(config["TARGETS"]):
        raise IndexError("–¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    config["TARGETS"].pop(index)
    if save:
        await save_config(config)
    return config


async def update_target(config: dict, index: int, gift_id: str = None, max_price: int = None, enabled: bool = None,
                        save: bool = True) -> dict:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞—Ä–≥–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É.
    :param config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    :param index: –ò–Ω–¥–µ–∫—Å —Ç–∞—Ä–≥–µ—Ç–∞
    :param gift_id: –ù–æ–≤—ã–π ID –ø–æ–¥–∞—Ä–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param max_price: –ù–æ–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param enabled: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param save: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∫–æ–Ω—Ñ–∏–≥
    :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    """
    if "TARGETS" not in config or index >= len(config["TARGETS"]):
        raise IndexError("–¢–∞—Ä–≥–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    target = config["TARGETS"][index]
    if gift_id is not None:
        target["GIFT_ID"] = str(gift_id)
    if max_price is not None:
        target["MAX_PRICE"] = int(max_price)
    if enabled is not None:
        target["ENABLED"] = bool(enabled)

    if save:
        await save_config(config)
    return config


def format_config_summary(config: dict, user_id: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–∞—Ä–≥–µ—Ç–æ–≤.
    :param config: –í—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Å–ª–æ–≤–∞—Ä—å)
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–í—ã"
    :return: –ì–æ—Ç–æ–≤—ã–π HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω—é
    """
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if config.get("ACTIVE") else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    userbot = config.get("USERBOT", {})
    userbot_balance = userbot.get("BALANCE", 0)
    userbot_first_name = userbot.get("FIRST_NAME", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    userbot_username = userbot.get("USERNAME")
    session_state = bool(userbot.get("API_ID") and userbot.get("API_HASH") and userbot.get("PHONE"))

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if session_state:
        sender_display = f"{userbot_first_name}"
        if userbot_username:
            sender_display += f" (@{userbot_username})"
    else:
        sender_display = "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    target_display = get_target_display_local(
        config.get("TARGET_USER_ID"),
        config.get("TARGET_CHAT_ID"),
        user_id
    )

    # –ü–æ–¥—Å—á–µ—Ç —Ç–∞—Ä–≥–µ—Ç–æ–≤
    targets = config.get("TARGETS", [])
    enabled_targets = [t for t in targets if t.get("ENABLED", True)]

    lines = [
        f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}",
        f"\nüì§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {sender_display}",
        f"üì• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {target_display}",
        f"\nüéØ <b>–¢–∞—Ä–≥–µ—Ç–æ–≤:</b> {len(enabled_targets)} –∏–∑ {len(targets)}"
    ]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–∞—Ä–≥–µ—Ç–∞
    for i, target in enumerate(enabled_targets[:3]):
        gift_name = target.get("GIFT_NAME", "üéÅ")
        max_price = target.get("MAX_PRICE", 0)
        lines.append(f"  ‚Ä¢ {gift_name} –¥–æ ‚òÖ{max_price:,}")

    if len(enabled_targets) > 3:
        lines.append(f"  ‚Ä¢ –∏ –µ—â—ë {len(enabled_targets) - 3}...")

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if session_state:
        lines.append(f"\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {userbot_balance:,} ‚òÖ")
    else:
        lines.append(f"\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω")

    return "\n".join(lines)


def get_target_display_local(target_user_id: int, target_chat_id: str, user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞.
    :param target_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param target_chat_id: ID —á–∞—Ç–∞
    :param user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –º–µ–Ω—é
    """
    if target_chat_id:
        return f"{target_chat_id}"
    elif target_user_id and str(target_user_id) == str(user_id):
        return f"<code>{target_user_id}</code> (–í—ã)"
    elif target_user_id:
        return f"<code>{target_user_id}</code>"
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω"