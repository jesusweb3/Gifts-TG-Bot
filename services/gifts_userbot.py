# services/gifts_userbot.py
"""
–ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ Pyrogram –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –ü–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏.
- –ü–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ ID –∑–∞ –∑–≤–µ–∑–¥—ã (–Ω–µ TON).
- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- get_available_resale_gifts: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏.
- find_cheapest_gift_by_id: –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ ID –∑–∞ –∑–≤–µ–∑–¥—ã.
- normalize_resale_gift: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.
- check_gift_availability: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ (–±–µ–∑ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω).
"""

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import logging

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from pyrogram import Client, enums
from pyrogram.types import Gift

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import MORE_LOGS, get_valid_config
from services.userbot import get_userbot_client, is_userbot_active

logger = logging.getLogger(__name__)


def normalize_resale_gift(gift) -> dict:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.

    :param gift: –û–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –∏–∑ Pyrogram
    :return: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∞—Ä–∫–∞
    """
    star_price = getattr(gift, 'last_resale_star_count', None)
    collectible_id = getattr(gift, 'collectible_id', 'Unknown')
    name = getattr(gift, 'name', 'Unknown')
    link = getattr(gift, 'link', '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º resale_ton_only
    resale_ton_only = False
    try:
        if hasattr(gift, 'raw') and hasattr(gift.raw, 'resale_ton_only'):
            resale_ton_only = gift.raw.resale_ton_only
    except AttributeError:
        pass

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    attributes = []
    if hasattr(gift, 'attributes') and gift.attributes:
        attributes = [attr.name for attr in gift.attributes if hasattr(attr, 'name')]

    result = {
        "id": collectible_id,
        "gift_id": getattr(gift, 'gift_id', None),
        "price": star_price or 0,
        "name": name,
        "link": link,
        "attributes": attributes,
        "resale_ton_only": resale_ton_only,
        "available_for_stars": star_price is not None and not resale_ton_only
    }

    logger.debug(
        f"üîÑ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø: –ü–æ–¥–∞—Ä–æ–∫ {name} - —Ü–µ–Ω–∞: ‚òÖ{star_price or 0}, –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ –∑–≤–µ–∑–¥—ã: {result['available_for_stars']}")

    return result


async def get_available_resale_gifts(user_id: int) -> list[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏.

    :param user_id: Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏
    """
    logger.debug(f"üéÅ –ü–û–î–ê–†–ö–ò: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")

    if not is_userbot_active(user_id):
        logger.debug("üì§ –ü–û–î–ê–†–ö–ò: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        return []

    try:
        config = await get_valid_config()
        userbot_config = config.get("USERBOT", {})
        if not userbot_config.get("ENABLED", False):
            logger.debug("üì§ –ü–û–î–ê–†–ö–ò: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            return []

        client: Client = await get_userbot_client(user_id)
        if client is None:
            logger.error("‚ùå –ü–û–î–ê–†–ö–ò: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
            return []

        logger.debug("üìû –ü–û–î–ê–†–ö–ò: –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —á–µ—Ä–µ–∑ get_available_gifts")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        available_gifts: list[Gift] = await client.get_available_gifts()

        logger.info(f"üì¶ –ü–û–î–ê–†–ö–ò: –ü–æ–ª—É—á–µ–Ω–æ {len(available_gifts)} –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏
        resale_gifts = []
        for gift in available_gifts:
            gift_id = getattr(gift, 'id', 'Unknown')
            title = getattr(gift, 'title', 'No Title')
            resale_amount = getattr(gift, 'available_resale_amount', 0)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            if title is None:
                title = 'No Title'

            # –¢–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–µ
            if resale_amount and resale_amount > 0:
                resale_gifts.append({
                    'id': gift_id,
                    'title': title,
                    'resale_amount': resale_amount
                })

                if MORE_LOGS:
                    logger.debug(
                        f"‚úÖ –ü–û–î–ê–†–ö–ò: –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ - {title} (ID: {gift_id}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {resale_amount})")

        logger.info(f"üéØ –ü–û–î–ê–†–ö–ò: –ù–∞–π–¥–µ–Ω–æ {len(resale_gifts)} —Ç–∏–ø–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏")

        if resale_gifts:
            total_amount = sum(gift['resale_amount'] for gift in resale_gifts)
            logger.info(f"üìä –ü–û–î–ê–†–ö–ò: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏: {total_amount:,}")

        return resale_gifts

    except Exception as e:
        logger.error(f"üí• –ü–û–î–ê–†–ö–ò: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏: {e}")
        return []


async def find_cheapest_gift_by_id(user_id: int, gift_id: int, max_price: int = None,
                                   max_check: int = None) -> dict | None:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ ID –∑–∞ –∑–≤–µ–∑–¥—ã (–Ω–µ TON).
    –ò—â–µ—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –∑–∞ –∑–≤–µ–∑–¥—ã (—Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π).

    :param user_id: Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏
    :param gift_id: ID —Ç–∏–ø–∞ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    :param max_price: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö (–µ—Å–ª–∏ None - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
    :param max_check: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    logger.info(f"üîç –ü–û–ò–°–ö: –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ ID {gift_id} –∑–∞ –∑–≤–µ–∑–¥—ã")
    if max_price:
        logger.info(f"üí∞ –ü–û–ò–°–ö: –¶–µ–Ω–æ–≤–æ–π –ª–∏–º–∏—Ç: ‚òÖ{max_price:,}")

    if not is_userbot_active(user_id):
        logger.debug("üì§ –ü–û–ò–°–ö: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –ø–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
        return None

    try:
        config = await get_valid_config()
        userbot_config = config.get("USERBOT", {})
        if not userbot_config.get("ENABLED", False):
            logger.debug("üì§ –ü–û–ò–°–ö: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ - –ø–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return None

        client: Client = await get_userbot_client(user_id)
        if client is None:
            logger.error("‚ùå –ü–û–ò–°–ö: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
            return None

        # –ò—â–µ–º –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –ø–æ ID, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–µ
        logger.debug("üìû –ü–û–ò–°–ö: –í—ã–∑–æ–≤ search_gifts_for_resale —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ü–µ–Ω–µ")
        gifts_generator = client.search_gifts_for_resale(
            gift_id=gift_id,
            order=enums.GiftForResaleOrder.PRICE
        )

        checked = 0

        async for gift in gifts_generator:
            checked += 1

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞
            gift_data = normalize_resale_gift(gift)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–æ–¥–∞—Ä–∫–æ–≤
            if checked % 50 == 0:
                logger.debug(f"üîÑ –ü–û–ò–°–ö: –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked} –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è ID {gift_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ –∑–≤–µ–∑–¥—ã
            if gift_data["available_for_stars"] and gift_data["price"] > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞
                if max_price is None or gift_data["price"] <= max_price:
                    logger.info(f"‚úÖ –ü–û–ò–°–ö: –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ ID {gift_id}")
                    logger.info(f"üéÅ –ü–û–ò–°–ö: –ù–∞–∑–≤–∞–Ω–∏–µ: {gift_data['name']}")
                    logger.info(f"üí∞ –ü–û–ò–°–ö: –¶–µ–Ω–∞: ‚òÖ{gift_data['price']:,}")
                    logger.info(f"üîó –ü–û–ò–°–ö: –°—Å—ã–ª–∫–∞: {gift_data['link']}")
                    logger.info(f"üìä –ü–û–ò–°–ö: –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ {checked} –ø–æ–¥–∞—Ä–∫–æ–≤")

                    return gift_data
                else:
                    # –ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫, –Ω–æ –æ–Ω –¥–æ—Ä–æ–∂–µ –ª–∏–º–∏—Ç–∞
                    logger.warning(f"üí∏ –ü–û–ò–°–ö: –°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (‚òÖ{gift_data['price']:,}) –¥–æ—Ä–æ–∂–µ –ª–∏–º–∏—Ç–∞ (‚òÖ{max_price:,}) - {gift_data['link']}")
                    return None

        logger.info(f"‚ùå –ü–û–ò–°–ö: –ü–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ ID {gift_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ {checked} –ø–æ–¥–∞—Ä–∫–æ–≤")
        return None

    except Exception as e:
        logger.error(f"üí• –ü–û–ò–°–ö: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ ID {gift_id}: {e}")
        return None


def validate_gift_id(gift_id: str | int) -> int | None:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ID –ø–æ–¥–∞—Ä–∫–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.

    :param gift_id: ID –ø–æ–¥–∞—Ä–∫–∞ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ)
    :return: –í–∞–ª–∏–¥–Ω—ã–π ID –∫–∞–∫ int –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
    """
    logger.debug(f"‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ Gift ID: {gift_id} (—Ç–∏–ø: {type(gift_id).__name__})")

    try:
        if isinstance(gift_id, str):
            gift_id_int = int(gift_id)
        elif isinstance(gift_id, int):
            gift_id_int = gift_id
        else:
            logger.error(f"‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø Gift ID: {type(gift_id).__name__}")
            return None

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ ID –Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π
        if gift_id_int < 1000000000:  # ID –ø–æ–¥–∞—Ä–∫–æ–≤ –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ
            logger.error(f"‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: Gift ID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {gift_id_int}")
            return None

        logger.debug(f"‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: Gift ID –≤–∞–ª–∏–¥–µ–Ω: {gift_id_int}")
        return gift_id_int

    except (ValueError, TypeError) as e:
        logger.error(f"‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Gift ID '{gift_id}': {e}")
        return None


async def check_gift_availability(user_id: int, gift_id: int) -> dict:
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏.
    –ù–ï –∏—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏ —Ü–µ–Ω—ã - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–¥–∞—Ä–∫–∞.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param gift_id: ID —Ç–∏–ø–∞ –ø–æ–¥–∞—Ä–∫–∞
    :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    """
    validated_id = validate_gift_id(gift_id)
    if validated_id is None:
        logger.error(f"‚ùå –ü–†–û–í–ï–†–ö–ê: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Gift ID: {gift_id}")
        return {
            "available": False,
            "error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–¥–∞—Ä–∫–∞",
            "total_found": 0
        }

    try:
        config = await get_valid_config()
        userbot_config = config.get("USERBOT", {})
        if not userbot_config.get("ENABLED", False):
            logger.warning("‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return {
                "available": False,
                "error": "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω",
                "total_found": 0
            }

        client: Client = await get_userbot_client(user_id)
        if client is None:
            logger.error("‚ùå –ü–†–û–í–ï–†–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
            return {
                "available": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                "total_found": 0
            }

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ (–±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã)
        available_gifts: list[Gift] = await client.get_available_gifts()

        # –ò—â–µ–º –Ω—É–∂–Ω—ã–π ID —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤
        target_gift = None
        for gift in available_gifts:
            gift_id_attr = getattr(gift, 'id', None)
            if str(gift_id_attr) == str(validated_id):
                target_gift = gift
                break

        if not target_gift:
            logger.warning(f"‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê: –ü–æ–¥–∞—Ä–æ–∫ ID {validated_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤")
            return {
                "available": False,
                "error": "–ü–æ–¥–∞—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤",
                "total_found": 0
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏
        resale_amount = getattr(target_gift, 'available_resale_amount', 0)
        title = getattr(target_gift, 'title', 'Unknown')

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º None title
        if title is None:
            title = 'Unknown'

        if not resale_amount or resale_amount <= 0:
            logger.warning(f"‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê: –ü–æ–¥–∞—Ä–æ–∫ '{title}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {resale_amount})")
            return {
                "available": False,
                "error": f"–ü–æ–¥–∞—Ä–æ–∫ '{title}' –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ (amount: {resale_amount})",
                "total_found": 0
            }

        logger.info(f"üéÅ –ü–†–û–í–ï–†–ö–ê: –ù–∞–π–¥–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: {title} (ID: {validated_id}) –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: {resale_amount:,}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó –ø–æ–∏—Å–∫–∞ –¥–µ—à–µ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        result = {
            "available": True,
            "error": None,
            "total_found": resale_amount,
            "gift_name": title
        }

        return result

    except Exception as e:
        logger.error(f"üí• –ü–†–û–í–ï–†–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ ID {gift_id}: {e}")
        return {
            "available": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}",
            "total_found": 0
        }