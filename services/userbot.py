# services/userbot.py
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–µ–π —á–µ—Ä–µ–∑ Pyrogram.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –°–æ–∑–¥–∞–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏.
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –∫ —Ä–∞–±–æ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- is_userbot_active: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏—è.
- get_userbot_client: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API.
- try_start_userbot_from_config: –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
"""

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import logging
import os
import builtins
import asyncio

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from pyrogram import Client
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneCodeInvalid,
    SessionPasswordNeeded,
    PasswordHashInvalid,
    PhoneNumberInvalid,
    FloodWait,
    BadRequest,
    RPCError,
    SecurityCheckMismatch
)

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from services.config import (
    get_valid_config, save_config,
    DEVICE_MODEL, SYSTEM_VERSION, APP_VERSION, LANG_CODE, SYSTEM_LANG_CODE
)

logger = logging.getLogger(__name__)

sessions_dir = os.path.abspath("sessions")  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
os.makedirs(sessions_dir, exist_ok=True)

# –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ - –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_userbot_client: Client | None = None
_userbot_started: bool = False
_current_user_id: int | None = None


def is_userbot_active(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏—è.
    –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –∑–∞–ø—É—â–µ–Ω, –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
    """
    global _userbot_client, _userbot_started, _current_user_id

    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (_userbot_client is None or
            not _userbot_started or
            _current_user_id != user_id):
        logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
    if not _userbot_client.is_connected:
        logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        return False

    logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ê–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ‚úÖ")
    return True


async def get_userbot_client(user_id: int) -> Client | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ Pyrogram Client –¥–ª—è user_id.
    –ö–ª–∏–µ–Ω—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≥–æ—Ç–æ–≤ –¥–ª—è –≤—ã–∑–æ–≤–∞ API.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –ì–æ—Ç–æ–≤—ã–π Pyrogram Client –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    global _userbot_client

    logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if not is_userbot_active(user_id):
        logger.debug("‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        return None

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    try:
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        logger.debug("üîç –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞...")
        me = await _userbot_client.get_me()
        logger.debug(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
        return _userbot_client

    except Exception as e:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–ª–∏–µ–Ω—Ç –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω: {e}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        await _reset_userbot_state()
        return None


async def _reset_userbot_state():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    global _userbot_client, _userbot_started, _current_user_id

    logger.warning("‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")

    if _userbot_client:
        try:
            if _userbot_client.is_connected:
                await _userbot_client.disconnect()
            await _userbot_client.stop()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ

    _userbot_client = None
    _userbot_started = False
    _current_user_id = None


async def is_userbot_premium(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: True –µ—Å–ª–∏ –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç
    """
    client = await get_userbot_client(user_id)
    if client is None:
        logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å - –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

    try:
        logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞")
        me = await client.get_me()
        is_premium = getattr(me, 'is_premium', False)
        logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ï—Å—Ç—å' if is_premium else '‚ùå –ù–µ—Ç'}")
        return is_premium
    except Exception as e:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False


async def try_start_userbot_from_config(user_id: int, bot_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ—ë.
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    :param bot_id: ID –±–æ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    :return: True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
    """
    global _userbot_client, _userbot_started, _current_user_id

    logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        # –ó–∞–ø—Ä–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        builtins.input = lambda _: (_ for _ in ()).throw(RuntimeError())

        os.makedirs(sessions_dir, exist_ok=True)

        config = await get_valid_config()
        userbot_data = config.get("USERBOT", {})
        required_fields = ("API_ID", "API_HASH", "PHONE")
        session_name = f"userbot_{user_id}"
        session_path = os.path.join(sessions_dir, f"{session_name}.session")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        missing_fields = [field for field in required_fields if not userbot_data.get(field)]

        if missing_fields:
            logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            _cleanup_session_files(session_path)
            await _clear_userbot_config()
            return False

        api_id = userbot_data["API_ID"]
        api_hash = userbot_data["API_HASH"]
        phone_number = userbot_data["PHONE"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
        if not os.path.exists(session_path):
            logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            await _clear_userbot_config()
            return False

        logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_path}")

        file_size = os.path.getsize(session_path)
        if file_size < 100:
            logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª ({file_size} –±–∞–π—Ç) - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            _cleanup_session_files(session_path)
            await _clear_userbot_config()
            return False

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        app: Client = await create_userbot_client(session_name, api_id, api_hash, phone_number, sessions_dir)

        try:
            logger.info("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ó–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await app.start()

            # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            me = await app.get_me()

            logger.info(
                f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ {me.first_name} (@{me.username or '–±–µ–∑ username'}) ID: {me.id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥
            config["USERBOT"]["USER_ID"] = me.id
            config["USERBOT"]["USERNAME"] = me.username
            config["USERBOT"]["FIRST_NAME"] = me.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            await save_config(config)
            logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            _userbot_client = app
            _userbot_started = True
            _current_user_id = user_id

            logger.info("üü¢ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –°–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞: {e}")

            try:
                await app.stop()
                logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                pass

            logger.info("üóëÔ∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏")
            _cleanup_session_files(session_path)
            await _clear_userbot_config()
            return False

    except Exception as e:
        logger.error(f"üí• –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {e}")
        await _reset_userbot_state()
        return False


def _cleanup_session_files(session_path: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏."""
    logger.debug(f"üóëÔ∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏: {session_path}")

    files_removed = 0
    try:
        if os.path.exists(session_path):
            os.remove(session_path)
            files_removed += 1
            logger.debug("üóëÔ∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω")
    except Exception as rm_err:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {rm_err}")

    journal = session_path + "-journal"
    if os.path.exists(journal):
        try:
            os.remove(journal)
            files_removed += 1
            logger.debug("üóëÔ∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ñ—É—Ä–Ω–∞–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω")
        except Exception as j_err:
            logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∂—É—Ä–Ω–∞–ª —Å–µ—Å—Å–∏–∏: {j_err}")

    if files_removed > 0:
        logger.debug(f"üóëÔ∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –£–¥–∞–ª–µ–Ω–æ {files_removed} —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏")


async def _clear_userbot_config():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—è USERBOT –≤ –∫–æ–Ω—Ñ–∏–≥–µ."""
    logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")

    config = await get_valid_config()
    config["USERBOT"] = {
        "API_ID": None,
        "API_HASH": None,
        "PHONE": None,
        "USER_ID": None,
        "USERNAME": None,
        "FIRST_NAME": None,
        "BALANCE": 0,
        "ENABLED": True,
        "UPDATE_INTERVAL": 45
    }
    await save_config(config)
    logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω–∞")


async def create_userbot_client(
        session_name: str,
        api_id: int,
        api_hash: str,
        phone: str,
        workdir: str,
) -> Client:
    """
    –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Pyrogram Client —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Desktop-–∫–ª–∏–µ–Ω—Ç–∞.

    :param session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
    :param api_id: API ID –æ—Ç my.telegram.org
    :param api_hash: API Hash –æ—Ç my.telegram.org
    :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :param workdir: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π
    :return: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Pyrogram Client
    """
    logger.debug(f"üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")

    return Client(
        name=session_name,
        api_id=api_id,
        api_hash=api_hash,
        phone_number=phone,
        workdir=workdir,
        device_model=DEVICE_MODEL,
        system_version=SYSTEM_VERSION,
        app_version=APP_VERSION,
        lang_code=LANG_CODE,
        system_lang_code=SYSTEM_LANG_CODE,
        sleep_threshold=30,
        no_updates=True,
        skip_updates=True
    )


# === –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===

async def start_userbot(message: Message, state) -> bool:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    global _userbot_client, _current_user_id

    builtins.input = lambda _: (_ for _ in ()).throw(RuntimeError())

    data = await state.get_data()
    user_id = message.from_user.id

    session_name = f"userbot_{user_id}"
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    phone_number = data["phone"]

    app: Client = await create_userbot_client(session_name, api_id, api_hash, phone_number, sessions_dir)

    logger.debug("üì§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram")
    await app.connect()

    try:
        sent = await app.send_code(phone_number)
        _userbot_client = app
        _current_user_id = user_id
        await state.update_data(phone_code_hash=sent.phone_code_hash, phone=phone_number)

        logger.info("‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return True

    except ApiIdInvalid:
        logger.error("‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ–≤–µ—Ä–Ω—ã–π api_id –∏ api_hash")
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π api_id –∏ api_hash. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        return False
    except PhoneNumberInvalid:
        logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return False
    except FloodWait as e:
        logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–∂–∏–¥–∞–Ω–∏–µ {e.value} —Å–µ–∫—É–Ω–¥")
        await message.answer(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥.")
        return False
    except Exception as e:
        logger.error(f"üí• –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        await message.answer(f"üö´ –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        if not app.is_connected:
            await app.disconnect()
            return False


async def continue_userbot_signin(call: CallbackQuery, state: FSMContext) -> tuple[bool, bool, bool]:
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    global _userbot_client, _userbot_started, _current_user_id

    data = await state.get_data()
    user_id = call.from_user.id
    code = data["code"]
    attempts = data.get("code_attempts", 0)

    if not _userbot_client:
        logger.error("‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await call.message.answer("üö´ –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return False, False, False

    phone = data["phone"]
    phone_code_hash = data["phone_code_hash"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]

    try:
        await _userbot_client.sign_in(
            phone_number=phone,
            phone_code_hash=phone_code_hash,
            phone_code=code
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        me = await _userbot_client.get_me()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        _userbot_started = True
        _current_user_id = user_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥
        config = await get_valid_config()
        config["USERBOT"]["API_ID"] = api_id
        config["USERBOT"]["API_HASH"] = api_hash
        config["USERBOT"]["PHONE"] = phone
        config["USERBOT"]["USER_ID"] = me.id
        config["USERBOT"]["USERNAME"] = me.username
        config["USERBOT"]["FIRST_NAME"] = me.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        config["USERBOT"]["ENABLED"] = True
        await save_config(config)

        logger.info(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–∞–∫ {me.first_name}")
        return True, False, False

    except PhoneCodeInvalid:
        attempts += 1
        await state.update_data(code_attempts=attempts)
        if attempts < 3:
            logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ (–ø–æ–ø—ã—Ç–∫–∞ {attempts}/3)")
            return False, False, True  # retry
        else:
            logger.error("‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
            return False, False, False
    except SessionPasswordNeeded:
        logger.info("üîê –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        return True, True, False
    except Exception as e:
        logger.error(f"üí• –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
        return False, False, False


async def finish_userbot_signin(message: Message, state) -> tuple[bool, bool]:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è."""
    global _userbot_client, _userbot_started, _current_user_id

    data = await state.get_data()
    user_id = message.from_user.id

    if not _userbot_client:
        logger.error("‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è")
        return False, False

    password = data["password"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    phone = data["phone"]
    attempts = data.get("password_attempts", 0)

    try:
        await _userbot_client.check_password(password)
        me = await _userbot_client.get_me()

        _userbot_started = True
        _current_user_id = user_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥
        config = await get_valid_config()
        config["USERBOT"]["API_ID"] = api_id
        config["USERBOT"]["API_HASH"] = api_hash
        config["USERBOT"]["PHONE"] = phone
        config["USERBOT"]["USER_ID"] = me.id
        config["USERBOT"]["USERNAME"] = me.username
        config["USERBOT"]["FIRST_NAME"] = me.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        config["USERBOT"]["ENABLED"] = True
        await save_config(config)

        logger.info(f"‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–∞–∫ {me.first_name}")
        return True, False

    except PasswordHashInvalid:
        attempts += 1
        await state.update_data(password_attempts=attempts)
        if attempts < 3:
            logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (–ø–æ–ø—ã—Ç–∫–∞ {attempts}/3)")
            return False, True  # retry
        else:
            logger.error("‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è")
            return False, False
    except Exception as e:
        logger.error(f"üí• –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
        return False, False


async def delete_userbot_session(call: CallbackQuery, user_id: int) -> bool:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏—é."""
    global _userbot_client, _userbot_started, _current_user_id

    logger.info(f"üóëÔ∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    session_name = f"userbot_{user_id}"
    session_path = os.path.join(sessions_dir, f"{session_name}.session")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    if _userbot_client:
        try:
            if _userbot_client.is_connected:
                await _userbot_client.disconnect()
                await asyncio.sleep(0.5)
            if _userbot_started:
                await _userbot_client.stop()
                await asyncio.sleep(1.0)
            logger.info("‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    # –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    _userbot_client = None
    _userbot_started = False
    _current_user_id = None

    await asyncio.sleep(1.0)

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            _cleanup_session_files(session_path)
            logger.info("‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –§–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            break
        except Exception as e:
            if attempt < max_attempts - 1:
                logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                await asyncio.sleep(1.0)
            else:
                logger.error(f"‚ùå –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏: {e}")

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    await _clear_userbot_config()

    logger.info("‚úÖ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –°–µ—Å—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞")
    return True