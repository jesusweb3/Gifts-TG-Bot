# services/gifts_manager.py
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞—Ä–≥–µ—Ç–æ–≤ (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞).

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏, –≤–∫–ª—é—á–∞—è:
- –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞—Ä–≥–µ—Ç—É.
- –ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID —Å —É—á–µ—Ç–æ–º —Ü–µ–Ω—ã.
- –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö.
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ù–ï –æ—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- userbot_targets_updater: –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞—Ä–≥–µ—Ç–∞–º.
- get_target_gift: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞.
- update_target_cache: –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞.
"""

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import time
import random
import asyncio
import logging
from typing import Dict, Optional

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import get_valid_config, MORE_LOGS
from services.gifts_userbot import find_cheapest_gift_by_id

logger = logging.getLogger(__name__)

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–µ—à –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ —Ç–∞—Ä–≥–µ—Ç–∞–º
targets_cache: Dict[int, Dict] = {}
last_global_update: float = 0


async def update_target_cache(user_id: int, target_index: int, target: dict) -> Optional[dict]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param target_index: –ò–Ω–¥–µ–∫—Å —Ç–∞—Ä–≥–µ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
    :param target: –î–∞–Ω–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç–∞ (GIFT_ID, MAX_PRICE, etc.)
    :return: –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∏–ª–∏ None
    """
    gift_id = target.get("GIFT_ID")
    max_price = target.get("MAX_PRICE", 0)
    gift_name = target.get("GIFT_NAME", "üéÅ")

    if not gift_id:
        logger.warning(f"‚ö†Ô∏è –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –¢–∞—Ä–≥–µ—Ç #{target_index} –Ω–µ –∏–º–µ–µ—Ç GIFT_ID")
        return None

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º gift_id –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(gift_id, str):
            gift_id = int(gift_id)

        logger.debug(
            f"üîÑ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index}: {gift_name} (ID: {gift_id}, –ª–∏–º–∏—Ç: ‚òÖ{max_price:,})")

        # –ò—â–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ ID
        gift_data = await find_cheapest_gift_by_id(
            user_id=user_id,
            gift_id=gift_id,
            max_price=max_price
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        targets_cache[target_index] = {
            "gift_data": gift_data,
            "last_update": time.time(),
            "target_info": {
                "gift_id": gift_id,
                "gift_name": gift_name,
                "max_price": max_price
            }
        }

        if gift_data:
            logger.debug(
                f"‚úÖ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index}: {gift_data['name']} –∑–∞ ‚òÖ{gift_data['price']:,}")
        else:
            logger.debug(f"üì¶ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ‚òÖ{max_price:,}")

        return gift_data

    except ValueError as e:
        logger.error(f"‚ùå –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ù–µ–≤–µ—Ä–Ω—ã–π GIFT_ID –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index}: {gift_id} - {e}")
        return None
    except Exception as e:
        logger.error(f"üí• –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index} (ID: {gift_id}): {e}")
        return None


async def userbot_targets_updater(user_id: int) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞—Ä–≥–µ—Ç–∞–º.

    :param user_id: Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-—Å–µ—Å—Å–∏–∏
    :return: None
    """
    global last_global_update

    cycle_count = 0
    last_log_time = 0

    try:
        while True:
            cycle_count += 1
            current_time = time.time()
            update_interval = 45  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            try:
                config = await get_valid_config()
                userbot_config = config.get("USERBOT", {})
                update_interval = userbot_config.get("UPDATE_INTERVAL", 45)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
                if not config.get("ACTIVE", False):
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
                    if current_time - last_log_time > 300:
                        logger.debug("‚è∏Ô∏è –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –æ–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                        last_log_time = current_time
                    await asyncio.sleep(5)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã
                targets = config.get("TARGETS", [])
                enabled_targets = [(i, t) for i, t in enumerate(targets) if t.get("ENABLED", True)]

                if not enabled_targets:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–∞—Ä–≥–µ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
                    if current_time - last_log_time > 300:
                        logger.debug("üìã –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–≥–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                        last_log_time = current_time
                    await asyncio.sleep(update_interval)
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç –ë–ï–ó –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                updated_count = 0
                found_gifts_count = 0

                for target_index, target in enabled_targets:
                    try:
                        gift_data = await update_target_cache(user_id, target_index, target)
                        updated_count += 1

                        if gift_data:
                            found_gifts_count += 1

                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (2-4 —Å–µ–∫—É–Ω–¥—ã)
                        delay = random.uniform(2.0, 4.0)
                        await asyncio.sleep(delay)

                    except asyncio.CancelledError:
                        logger.info("üõë –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
                        raise
                    except Exception as e:
                        logger.error(f"üí• –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index}: {e}")
                        continue

                last_global_update = time.time()

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ–Ω–æ
                if found_gifts_count > 0:
                    logger.debug(
                        f"‚úÖ –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è {found_gifts_count}/{len(enabled_targets)} —Ç–∞—Ä–≥–µ—Ç–æ–≤")

            except asyncio.CancelledError:
                logger.info("üõë –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
                raise
            except Exception as e:
                logger.error(f"üí• –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (45-60 —Å–µ–∫—É–Ω–¥)
            delay = random.randint(update_interval, update_interval + 15)

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –ø–æ–¥—Ä–æ–±–Ω–æ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
            if MORE_LOGS:
                logger.debug(f"‚è≥ –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥")

            await asyncio.sleep(delay)

    except asyncio.CancelledError:
        logger.info("üõë –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        raise
    except Exception as e:
        logger.error(f"üí• –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
    finally:
        logger.info("üèÅ –í–û–†–ö–ï–† –¢–ê–†–ì–ï–¢–û–í: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–æ–≤")


def get_target_gift(target_index: int) -> Optional[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞ –∏–∑ –∫–µ—à–∞.

    :param target_index: –ò–Ω–¥–µ–∫—Å —Ç–∞—Ä–≥–µ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
    :return: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    logger.debug(f"üì¶ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—Å –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index}")

    if target_index not in targets_cache:
        logger.debug(f"üì¶ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –¢–∞—Ä–≥–µ—Ç #{target_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ")
        return None

    cache_entry = targets_cache[target_index]
    gift_data = cache_entry.get("gift_data")

    if gift_data:
        logger.debug(
            f"‚úÖ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index}: {gift_data['name']} –∑–∞ ‚òÖ{gift_data['price']:,}")
    else:
        logger.debug(f"üì¶ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞ #{target_index} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–µ—à–µ")

    return gift_data


def get_all_available_target_gifts(user_id: int) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–≥–µ—Ç–æ–≤.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    :return: –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞—Ä–≥–µ—Ç–µ
    """
    logger.debug(f"üì¶ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    available_gifts = []

    for target_index, cache_entry in targets_cache.items():
        gift_data = cache_entry.get("gift_data")
        target_info = cache_entry.get("target_info", {})

        if gift_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–≥–µ—Ç–µ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–¥–∞—Ä–∫–∞
            enhanced_gift = gift_data.copy()
            enhanced_gift.update({
                "target_index": target_index,
                "target_gift_id": target_info.get("gift_id"),
                "target_gift_name": target_info.get("gift_name"),
                "target_max_price": target_info.get("max_price"),
                "last_update": cache_entry.get("last_update")
            })
            available_gifts.append(enhanced_gift)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ)
    available_gifts.sort(key=lambda g: g.get("price", 0))

    logger.debug(f"üì¶ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(available_gifts)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")

    if available_gifts:
        cheapest_price = available_gifts[0].get("price", 0)
        most_expensive_price = available_gifts[-1].get("price", 0)
        logger.debug(f"üì¶ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ‚òÖ{cheapest_price:,} - ‚òÖ{most_expensive_price:,}")

    return available_gifts


def clear_targets_cache() -> None:
    """
    –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à —Ç–∞—Ä–≥–µ—Ç–æ–≤.
    """
    global targets_cache

    cache_size = len(targets_cache)
    targets_cache.clear()

    logger.info(f"üóëÔ∏è –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ö–µ—à —Ç–∞—Ä–≥–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω ({cache_size} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ)")


def get_cache_stats() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–µ—à—É —Ç–∞—Ä–≥–µ—Ç–æ–≤.

    :return: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    total_targets = len(targets_cache)
    with_gifts = sum(1 for entry in targets_cache.values() if entry.get("gift_data"))

    stats = {
        "total_targets": total_targets,
        "with_gifts": with_gifts,
        "last_global_update": last_global_update,
        "targets_details": {
            idx: {
                "has_gift": bool(entry.get("gift_data")),
                "last_update": entry.get("last_update"),
                "target_name": entry.get("target_info", {}).get("gift_name", "Unknown")
            }
            for idx, entry in targets_cache.items()
        }
    }

    logger.debug(f"üìä –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ - –≤—Å–µ–≥–æ —Ç–∞—Ä–≥–µ—Ç–æ–≤: {total_targets}, —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏: {with_gifts}")

    return stats